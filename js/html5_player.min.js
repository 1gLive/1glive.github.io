var playerContainer, videoElement, is_video_start = !1,
isVideoJoin = !1,
videoHistoryTimer = null,
watermarkTimer = null,
fixWatermarkTimer = null,
geoCheckTimer = null,
is_fixTimer_called = !1,
is_hideTimer_calling = !1,
displayWatermarkTimer = null,
displayNextEPTimer = null,
is_nextep_fire = !1,
is_nextep_fire_once = !1,
videoPlayingTime = null,
seekfrom = "",
playHeadTime = 0,
isSeeking = !1,
isSeeked = !1,
firstWatermark = !0;
function init_html5_action() {
	playerContainer = $("#videoContainer"),
	(videoElement = document.getElementById("video")).addEventListener("timeupdate", videoIsPlaying),
	videoElement.addEventListener("play", videoOpen),
	videoElement.addEventListener("playing", videoResume),
	videoElement.addEventListener("pause", videoPause),
	videoElement.addEventListener("seeking", videoSeeking),
	videoElement.addEventListener("seeked", videoSeeked),
	videoElement.addEventListener("ended", videoEnd),
	window.addEventListener("beforeunload", videoStop),
	$(document).bind("keypress",
	function(e) {
		87 === e.which && e.shiftKey && ($("#errLogs").css("display", "block"), $("#controlsContainer").css("display", "none")),
		27 !== e.which && 0 !== e.which && 113 !== e.which || ($("#errLogs").css("display", "none"), $("#controlsContainer").css("display", "block"))
	});
	var e, t = "ontouchstart" in window || "onmsgesturechange" in window;
	if (window.chrome && window.chrome.webstore && -1 != window.navigator.userAgent.indexOf("Windows")) {
		e = t ? "0.6": "1.2";
		var i = document.createElement("style");
		i.type = "text/css",
		i.innerHTML = "#video::cue{font-size: " + e + "em!important;}",
		document.head.appendChild(i)
	}
	try {
		ana.reg("video", "player")
	} catch(e) {
		console.log("ads error =" + e)
	}
}
function setVideoHistory(e) {
	if (printLog("setVideoHistory:: current_time= " + e), null !== e && "live" != hpvars.videoType) try {
		var t = parseInt(e);
		viewHistory.addRecord(t)
	} catch(e) {
		console.log("setVideoHistory error")
	}
}
function videoIsPlaying() {
	videoPlayingTime = videoElement.currentTime,
	0 !== typeof hpvars.playhead && (playHeadTime = hpvars.playhead),
	videoElement.currentTime > videoElement.duration - 60 && !is_nextep_fire && "live" != hpvars.videoType && !is_nextep_fire_once && "" !== hpvars.nextVID && (is_nextep_fire = !0, is_nextep_fire_once = !0, onShowNextEp()),
	"live" != hpvars.videoType && (seekfrom = hpvars.seekfrom)
}
function initTracking() {
	if (printLog("initTracking::"), !is_video_start) {
		streamView.streamViewTracking("video", hpvars),
		"live" == hpvars.videoType && (seekfrom = playHeadTime),
		hpvars.prevSeekfrom = 0
	}
}
function videoOpen() {
	printLog("videoOpen::"),
	initTracking(),
	videoStart()
}
function videoStart() {
	if (printLog("videoStart::"), $("#adContainer").css("display", "none"), is_video_start) printLog("videoStart::::: seekfrom= " + (seekfrom = playHeadTime));
	else try {
		hpvars.haveSurvey = survey.checkVideoEnd(),
		printLog("haveSurvey= " + hpvars.haveSurvey),
		is_video_start = !0,
		setVideoHistory(videoElement.currentTime),
		streamView.eventTigger("start", 0, playHeadTime)
	} catch(e) {
		is_video_start = !0
	} ! 1 === is_hideTimer_calling && !1 === is_fixTimer_called && startWatermarkFixedTimer(),
	!1 === is_hideTimer_calling && !0 === is_fixTimer_called && startWatermarkRandomTimer(),
	!0 === is_hideTimer_calling && startHideWatermarkTimer(),
	is_nextep_fire && startHideNextEpTimer()
}
function videoResume() {
	printLog("videoResume::"),
	!1 === is_hideTimer_calling && !1 === is_fixTimer_called && startWatermarkFixedTimer(),
	!1 === is_hideTimer_calling && !0 === is_fixTimer_called && startWatermarkRandomTimer(),
	!0 === is_hideTimer_calling && startHideWatermarkTimer(),
	is_nextep_fire && startHideNextEpTimer(),
	isVideoJoin ? (printLog("videoResume::: isSeeking= " + isSeeking + ", isSeeked= " + isSeeked), isSeeking ? isSeeked = !1 : streamView.eventTigger("play", 0, playHeadTime), $("#giantPlayButtonContainer").css("display", "none")) : (isVideoJoin = !0, streamView.eventTigger("play", 0, playHeadTime))
}
function videoPause() {
	printLog("videoPause::"),
	!1 === is_hideTimer_calling && !1 === is_fixTimer_called && clearInterval(fixWatermarkTimer),
	!1 === is_hideTimer_calling && !0 === is_fixTimer_called && clearInterval(watermarkTimer),
	!0 === is_hideTimer_calling && clearTimeout(displayWatermarkTimer),
	printLog("videoPause:: isSeeking= " + isSeeking + ", isSeeked= " + isSeeked + ", seekfrom=" + seekfrom + ", hpvars.playhead=" + hpvars.playhead),
	isSeeking ? (printLog("videoPause:: isSeeking= " + isSeeking + ", isSeeked= " + (isSeeked = !1)), streamView.eventTigger("pause", 0, seekfrom)) : streamView.eventTigger("pause", 0, seekfrom),
	clearInterval(displayNextEPTimer)
}
function videoStop() {
	printLog("videoStop::"),
	streamView.eventTigger("stop", 0, playHeadTime)
}
function videoEnd() {
	printLog("videoEnd::");
	var e = !1;
	void 0 !== adsManager && (e = !!adsManager.getCuePoints().filter(function(e) {
		return - 1 == e
	}).length),
	!1 === is_hideTimer_calling && !1 === is_fixTimer_called && clearInterval(fixWatermarkTimer),
	!1 === is_hideTimer_calling && !0 === is_fixTimer_called && clearInterval(watermarkTimer),
	!0 === is_hideTimer_calling && clearTimeout(displayWatermarkTimer),
	clearInterval(geoCheckTimer),
	streamView.eventTigger("finish", 0, playHeadTime),
	contentEndedListener(),
	e || (hpvars.haveSurvey ? survey.videoEndCall(hpvars.nextVID) : "" !== hpvars.nextVID ? nextEpURL(hpvars.nextVID) : playerCall.onVideoEnd()),
	onHideNextEp()
}
function videoSeeking() {
	var e;
	isSeeking = !0,
	isVideoJoin && (printLog("videoSeeking:: seekfrom= " + seekfrom + ", hpvars.prevSeekfrom= " + hpvars.prevSeekfrom), hpvars.changeSetting || seekfrom === hpvars.prevSeekfrom && 0 !== seekfrom || streamView.eventTigger("seekfrom", "0", seekfrom), videoElement.currentTime > videoPlayingTime ? ((e = parseInt(videoElement.currentTime) - parseInt(videoPlayingTime)) > 5e8 && (e = 0), videoSeekForward(e, seekfrom)) : videoElement.currentTime < videoPlayingTime && ((e = parseInt(videoPlayingTime) - parseInt(videoElement.currentTime)) > 5e8 && (e = 0), videoSeekBackward(e, seekfrom)), hpvars.prevSeekfrom = seekfrom)
}
function videoSeeked() {
	printLog("videoSeeked:: is_video_start= " + is_video_start + ", isVideoJoin= " + isVideoJoin + ", hpvars.changeSetting= " + hpvars.changeSetting),
	isVideoJoin ? hpvars.changeSetting || (streamView.eventTigger("seekto", "0", playHeadTime), videoSeeked && (streamView.eventTigger("play", "0", playHeadTime), streamView.eventTigger("pause", "0", playHeadTime))) : "live" === hpvars.videoType && video.play(),
	isSeeking = !1,
	isSeeked = !0,
	hpvars.changeSetting = !1
}
function videoSeekForward(e, t) {
	printLog("videoSeekForward:: timeShift " + e),
	streamView.eventTigger("seekforward", e, t)
}
function videoSeekBackward(e, t) {
	printLog("videoSeekBackward:: timeShift " + e),
	videoElement.currentTime < videoPlayingTime - 60 && (onHideNextEp(), is_nextep_fire_once = !1),
	streamView.eventTigger("seekbackward", e, t)
}
function hidePlayer(e) {}
function startHistoryTImer() {
	printLog("startHistoryTImer"),
	clearInterval(videoHistoryTimer),
	videoHistoryTimer = setInterval(function() {
		historyTimerEvent()
	},
	1e3 * hpvars.historyInterval)
}
function historyTimerEvent() {
	setVideoHistory(videoElement.currentTime)
}
function startHideNextEpTimer() {
	displayNextEPTimer = setInterval(function() {
		onHideNextEp()
	},
	3e4)
}
function onShowNextEp() {
	var e = playerContainer.find("#nextEPContainer");
	void 0 === e[0] ? (playerContainer.append("<div style='display: none;' id='nextEPContainer'><div class='nextTxt'>" + langConvert("upnext") + ":</div><div class='nextThumb'><img src='" + hpvars.nextThumb + "'></div><div class='nextTitle'>" + hpvars.nextTitle + "</div></div>"), playerContainer.find("#nextEPContainer").fadeIn("slow")) : e.fadeIn("slow"),
	startHideNextEpTimer()
}
function onHideNextEp() {
	clearInterval(displayNextEPTimer),
	playerContainer.find("#nextEPContainer").fadeOut("slow"),
	is_nextep_fire = !1
}
function startWatermarkRandomTimer() {
	printLog("startWatermarkRandomTimer"),
	clearInterval(watermarkTimer);
	var e = Math.round(301 * Math.random() + 600);
	watermarkTimer = setInterval(function() {
		watermarkRandomTimerEvent()
	},
	1e3 * e)
}
function startWatermarkFixedTimer() {
	clearInterval(fixWatermarkTimer),
	fixWatermarkTimer = setInterval(function() {
		watermarkFixedTimerEvent()
	},
	6e4)
}
function startGeoCheckTimer() {
	printLog("startGeoCheckTimer::"),
	clearInterval(geoCheckTimer),
	geoCheckTimer = setInterval(function() {
		geoCheckTimerEvent()
	},
	18e5)
}
function watermarkFixedTimerEvent() {
	clearInterval(fixWatermarkTimer),
	is_hideTimer_calling = !0,
	fixWatermarkTimer = null,
	displayWatermark()
}
function watermarkRandomTimerEvent() {
	clearInterval(watermarkTimer),
	is_hideTimer_calling = !0,
	displayWatermark()
}
function geoCheckTimerEvent() {
	printLog("geoCheckTimerEvent"),
	$.ajax({
		url: "/tc/geoCheck",
		dataType: "jsonp",
		type: "get",
		success: function(e) {
			printLog("geoCheck success:: " + e),
			e || window.location.reload(!0)
		},
		error: function(e) {
			printLog("geoCheck error:: " + e),
			window.location.reload(!0)
		}
	})
}
function displayWatermark() {
	var e;
	firstWatermark ? ((e = Math.floor(3 * Math.random() + 3)) > 4 && (e = 3), firstWatermark = !1) : (e = Math.floor(4 * Math.random() + 1)) > 4 && (e = 2),
	$(".watermarkUI.position" + e).hide().html(hpvars.displaytxt).fadeIn("slow",
	function() {
		startHideWatermarkTimer()
	})
}
function startHideWatermarkTimer() {
	displayWatermarkTimer = setTimeout(function() {
		hideWatermark()
	},
	4e4)
}
function hideWatermark() {
	clearTimeout(displayWatermarkTimer),
	$(".watermarkUI").fadeOut("slow"),
	is_fixTimer_called ? startWatermarkRandomTimer() : (is_fixTimer_called = !0, startWatermarkRandomTimer()),
	is_hideTimer_calling = !1
}
function showFlip() {
	printLog("showFlip"),
	$("#flipContainer").show(),
	showFlipTimer = setTimeout(function() {
		$("#flipContainer").hide(),
		clearTimeout(showFlipTimer),
		"live" === hpvars.videoType ? (video.volume = 1, jumpToLive(), video.play()) : video.play(),
		hpvars.showFlip = !1
	},
	5e3)
}
function toHHMMSS(e) {
	var t = Math.floor(e / 3600),
	i = e % 3600,
	a = Math.floor(i / 60),
	n = i % 60,
	o = Math.ceil(n);
	return a < 10 && (a = "0" + a),
	o < 10 && (o = "0" + o),
	t <= 0 ? a + ":" + o: (t < 10 && (t = "0" + t), t + ":" + a + ":" + o)
}
function printLog(e) {
	var t, i = new Date;
	i.toLocaleString(),
	t = document.getElementById("errLogs").innerHTML,
	document.getElementById("errLogs").innerHTML = t + i.toLocaleString() + ": " + e + "\n",
	"prod" != hpvars.env && console.log(i.toLocaleString() + ": " + e)
}
function ShakaControls() {
	this.castProxy_ = null,
	this.castAllowed_ = !0,
	this.onError_ = null,
	this.video_ = null,
	this.player_ = null,
	this.videoContainer_ = document.getElementById("videoContainer"),
	this.adContainer_ = document.getElementById("adContainer"),
	this.flipContainer_ = document.getElementById("flipContainer"),
	this.errLogs_ = document.getElementById("errLogs"),
	this.controls_ = document.getElementById("controls"),
	this.playPauseButton_ = document.getElementById("playPauseButton"),
	this.seekBar_ = document.getElementById("seekBar"),
	this.soundButton_ = document.getElementById("soundButton"),
	this.muteButton_ = document.getElementById("muteButton"),
	this.volumeBar_ = document.getElementById("volumeBar"),
	this.fullscreenButton_ = document.getElementById("fullscreenButton"),
	this.fullscreenoffButton_ = document.getElementById("fullscreenoffButton"),
	this.currentTime_ = document.getElementById("currentTime"),
	this.castReceiverName_ = document.getElementById("castReceiverName"),
	this.bufferingSpinner_ = document.getElementById("bufferingSpinner"),
	this.giantPlayButtonContainer_ = document.getElementById("giantPlayButtonContainer"),
	this.isSeeking_ = !1,
	this.trickPlayRate_ = 1,
	this.seekTimeoutId_ = null,
	this.mouseStillTimeoutId_ = null,
	this.lastTouchEventTime_ = null,
	this.tooltips_ = $("#videoContainer .tooltips"),
	this.tooltipsValue_ = null,
	this.before_mute_vol_ = 0
}
ShakaControls.prototype.init = function(e, t, i) {
	var a = this;
	this.castProxy_ = e,
	this.onError_ = t,
	this.notifyCastStatus_ = i,
	this.initMinimal(e.getVideo(), e.getPlayer());
	var n = "input";
	navigator.userAgent.indexOf("Trident/") >= 0 && (n = "change"),
	$("#volumeBar").slider({
		range: "min",
		min: 0,
		max: 10,
		step: 1,
		value: 10 * a.video_.volume,
		orientation: "vertical",
		change: function(e, t) {
			var i = t.value / 10;
			printLog("volumeOnChange:: " + i);
			try {
				a.video_.volume = parseFloat(i),
				a.video_.muted && i > 0 && (a.video_.muted = !a.video_.muted),
				i > 0 ? ($(".mute-icon").css("display", "none"), $(".sound-icon").css("display", "block")) : ($(".mute-icon").css("display", "block"), $(".sound-icon").css("display", "none"))
			} catch(e) {
				printLog("volumeOnChange error:: " + e)
			}
		}
	}),
	$(document).on("webkitfullscreenchange mozfullscreenchange fullscreenchange MSFullscreenChange",
	function() {
		document.fullscreenElement ? ($(".smallsrn-icon").css("display", "block"), $(".fullsrn-icon").css("display", "none"), $("#div-gpt-ad-lrec-1_wrap").css("pointer-events", "none")) : ($(".smallsrn-icon").css("display", "none"), $(".fullsrn-icon").css("display", "block"), $("#div-gpt-ad-lrec-1_wrap").css("pointer-events", "initial"))
	}),
	$(window).bind("resize",
	function() {
		if (document.fullscreen || document.webkitIsFullScreen || document.mozFullScreen || document.msIsFullScreen || document.msFullscreenElement) {
			var e = window.screen.width,
			t = window.screen.height;
			void 0 !== adsManager && adsManager.resize(e, t, google.ima.ViewMode.FULLSCREEN),
			$("#videoContainer").addClass("fullscreen"),
			window.screen.width / 16 * 9 > window.screen.height ? (adjustSize = (window.screen.width - window.screen.height / 9 * 16) / 2 + 15, $(".fullscreen .watermarkUI.position1").css("left", adjustSize + "px"), $(".fullscreen .watermarkUI.position2").css("right", adjustSize + "px"), $(".fullscreen .watermarkUI.position3").css("left", "30%"), $(".fullscreen .watermarkUI.position4").css("right", "30%")) : (adjustSize = (window.screen.height - window.screen.width / 16 * 9) / 2 + 10, $(".fullscreen .watermarkUI.position3, .fullscreen .watermarkUI.position4").css("top", adjustSize + "px"))
		} else void 0 !== adsManager && adsManager.resize(640, 360, google.ima.ViewMode.NORMAL),
		$("#videoContainer").removeClass("fullscreen"),
		$(".watermarkUI.position1").css("left", "10px"),
		$(".watermarkUI.position2").css("right", "10px"),
		$(".watermarkUI.position3").css("left", "10px").css("top", "5px"),
		$(".watermarkUI.position4").css("right", "10px").css("top", "5px")
	}),
	$(".settingButton").click(function() {
		$(this).hasClass("click") ? ($(this).next(".settingPanel").removeClass("active"), $(this).removeClass("click")) : ($(this).addClass("click"), $(this).next(".settingPanel").addClass("active"))
	}),
	this.playPauseButton_.addEventListener("click", this.onPlayPauseClick_.bind(this)),
	this.video_.addEventListener("play", this.onPlayStateChange_.bind(this)),
	this.video_.addEventListener("pause", this.onPlayStateChange_.bind(this)),
	this.seekBar_.addEventListener("mousemove", this.onSeekMouseMove_.bind(this)),
	this.seekBar_.addEventListener("mousedown", this.onSeekStart_.bind(this)),
	this.seekBar_.addEventListener("touchstart", this.onSeekStart_.bind(this)),
	this.seekBar_.addEventListener(n, this.onSeekInput_.bind(this)),
	this.seekBar_.addEventListener("touchend", this.onSeekEnd_.bind(this)),
	this.seekBar_.addEventListener("mouseup", this.onSeekEnd_.bind(this)),
	this.seekBar_.addEventListener("mouseout", this.onSeekMouseOut_.bind(this)),
	this.muteButton_.addEventListener("click", this.onMuteClick_.bind(this)),
	this.soundButton_.addEventListener("click", this.onMuteClick_.bind(this)),
	this.volumeBar_.addEventListener(n, this.onVolumeInput_.bind(this)),
	this.video_.addEventListener("volumechange", this.onVolumeStateChange_.bind(this)),
	this.onVolumeStateChange_(),
	this.player_.addEventListener("texttrackvisibility", this.onCaptionStateChange_.bind(this)),
	this.player_.addEventListener("trackschanged", this.onTracksChange_.bind(this)),
	this.onCaptionStateChange_(),
	this.fullscreenButton_.addEventListener("click", this.onFullscreenClick_.bind(this)),
	this.fullscreenoffButton_.addEventListener("click", this.onFullscreenClick_.bind(this)),
	this.videoContainer_.addEventListener("touchstart", this.onContainerTouch_.bind(this)),
	this.videoContainer_.addEventListener("click", this.onPlayPauseClick_.bind(this)),
	this.controls_.addEventListener("click",
	function(e) {
		e.stopPropagation()
	}),
	this.videoContainer_.addEventListener("mousemove", this.onMouseMove_.bind(this)),
	this.videoContainer_.addEventListener("touchmove", this.onMouseMove_.bind(this)),
	this.videoContainer_.addEventListener("touchend", this.onMouseMove_.bind(this)),
	this.videoContainer_.addEventListener("mouseout", this.onMouseOut_.bind(this)),
	this.castProxy_.addEventListener("caststatuschanged", this.onCastStatusChange_.bind(this))
},
ShakaControls.prototype.initMinimal = function(e, t) {
	this.video_ = e,
	this.player_ = t,
	this.player_.addEventListener("buffering", this.onBufferingStateChange_.bind(this)),
	window.setInterval(this.updateTimeAndSeekRange_.bind(this), 125)
},
ShakaControls.prototype.allowCast = function(e) {
	this.castAllowed_ = e,
	this.onCastStatusChange_(null)
},
ShakaControls.prototype.loadComplete = function() {
	this.onPlayStateChange_()
},
ShakaControls.prototype.onMouseMove_ = function(e) {
	"touchstart" == e.type || "touchmove" == e.type || "touchend" == e.type ? this.lastTouchEventTime_ = Date.now() : this.lastTouchEventTime_ + 1e3 < Date.now() && (this.lastTouchEventTime_ = null),
	this.videoContainer_.style.cursor = "",
	this.controls_.style.opacity = 1,
	$("#div-gpt-ad-lrec-1_wrap").css("pointer-events", "none"),
	this.mouseStillTimeoutId_ && window.clearTimeout(this.mouseStillTimeoutId_),
	"touchend" != e.type && this.lastTouchEventTime_ || (this.mouseStillTimeoutId_ = window.setTimeout(this.onMouseStill_.bind(this), 3e3))
},
ShakaControls.prototype.onSeekMouseOut_ = function() {
	this.tooltips_.hide()
},
ShakaControls.prototype.onMouseOut_ = function() {
	this.mouseStillTimeoutId_ && window.clearTimeout(this.mouseStillTimeoutId_),
	this.onMouseStill_()
},
ShakaControls.prototype.onMouseStill_ = function() {
	this.mouseStillTimeoutId_ = null,
	this.videoContainer_.style.cursor = "none",
	this.controls_.style.opacity = this.lastTouchEventTime_ ? "0": "",
	$("#div-gpt-ad-lrec-1_wrap").css("pointer-events", "initial")
},
ShakaControls.prototype.onContainerTouch_ = function(e) {
	this.video_.duration && (1 == this.controls_.style.opacity ? this.lastTouchEventTime_ = Date.now() : (this.onMouseMove_(e), e.preventDefault()))
},
ShakaControls.prototype.onPlayPauseClick_ = function() { ! this.video_.duration || is_video_start && this.player_.isLive() || "block" == this.adContainer_.style.display || "block" == this.errLogs_.style.display || is_video_start && "block" == this.flipContainer_.style.display ? console.log("click play") : (this.player_.cancelTrickPlay(), this.trickPlayRate_ = 1, this.video_.paused && this.video_.currentTime == this.seekBar_.max || this.video_.ended ? location.reload() : this.video_.paused ? is_video_start ? this.video_.play() : this.player_.isLive() ? hpvars.showFlip ? (showFlip(), this.giantPlayButtonContainer_.style.display = "none") : jumpToLive() : ("" === hpvars.adTag ? requestAds() : video.play(), this.giantPlayButtonContainer_.style.display = "none") : this.video_.pause())
},
ShakaControls.prototype.onPlayStateChange_ = function() {
	printLog("hpvars.autoplay= " + hpvars.autoplay),
	this.video_.paused && this.video_.currentTime == this.seekBar_.max || this.video_.ended ? (this.playPauseButton_.textContent = "replay", this.giantPlayButtonContainer_.style.display = "none") : this.video_.paused && !this.isSeeking_ && "block" !== this.adContainer_.style.display && "block" !== this.flipContainer_.style.display ? (this.playPauseButton_.textContent = "play_arrow", hpvars.autoplay || (this.giantPlayButtonContainer_.style.display = "inline")) : (this.playPauseButton_.textContent = "pause", this.giantPlayButtonContainer_.style.display = "none")
},
ShakaControls.prototype.onSeekMouseMove_ = function(e) {
	var t = $("#seekBar").offset(),
	i = $("#seekBar").position(),
	a = parseFloat(e.target.getAttribute("max")),
	n = parseFloat(e.target.getAttribute("min")),
	o = this.player_.seekRange(),
	r = this.video_.duration,
	s = null,
	l = (e.pageX - t.left) / e.target.clientWidth * (a - n) + n;
	if (l = Math.min(l, a), l = Math.max(n, l), this.tooltipsValue_ = l, this.player_.isLive()) {
		var d = Math.floor(o.end - l);
		s = (l = Math.max(0, d)) >= 3600,
		(l >= 0 || this.isSeeking_) && (l = "- " + this.buildTimeString_(l, s))
	} else s = r >= 3600,
	l = this.buildTimeString_(l, s);
	void 0 !== r && r > 0 && (this.tooltips_.text(l), this.tooltips_.show(), this.tooltips_.css("left", e.pageX - t.left + i.left - 23 + "px"))
},
ShakaControls.prototype.onSeekStart_ = function() {
	this.isSeeking_ = !0,
	this.video_.pause()
},
ShakaControls.prototype.onSeekInput_ = function() {
	this.seekBar_.value = null != this.tooltipsValue_ ? this.tooltipsValue_: this.seekBar_.value,
	this.video_.duration && (this.updateTimeAndSeekRange_(), null != this.seekTimeoutId_ && window.clearTimeout(this.seekTimeoutId_), this.seekTimeoutId_ = window.setTimeout(this.onSeekInputTimeout_.bind(this), 125))
},
ShakaControls.prototype.onSeekInputTimeout_ = function() {
	this.seekTimeoutId_ = null,
	this.video_.currentTime = parseFloat(this.seekBar_.value)
},
ShakaControls.prototype.onSeekEnd_ = function() {
	null != this.seekTimeoutId_ && (window.clearTimeout(this.seekTimeoutId_), this.onSeekInputTimeout_()),
	this.isSeeking_ = !1,
	this.video_.currentTime == this.seekBar_.max && (this.video_.currentTime = this.video_.currentTime - .1),
	this.video_.play()
},
ShakaControls.prototype.onMuteClick_ = function() {
	this.video_.muted = !this.video_.muted,
	this.video_.muted ? (this.before_mute_vol_ = 10 * this.video_.volume, $("#volumeBar").slider("value", 0)) : $("#volumeBar").slider("value", this.before_mute_vol_)
},
ShakaControls.prototype.onVolumeStateChange_ = function() {
	this.video_.muted ? this.volumeBar_.value = 0 : this.volumeBar_.value = this.video_.volume;
	var e = ["to top"];
	e.push("#ccc " + 100 * this.volumeBar_.value + "%"),
	e.push("#fff " + 100 * this.volumeBar_.value + "%"),
	e.push("#fff 100%"),
	this.volumeBar_.style.background = "linear-gradient(" + e.join(",") + ")"
},
ShakaControls.prototype.onVolumeInput_ = function() {
	this.video_.volume = parseFloat(this.volumeBar_.value),
	this.video_.muted = !1
},
ShakaControls.prototype.onCaptionClick_ = function() {
	this.player_.setTextTrackVisibility(!this.player_.isTextTrackVisible())
},
ShakaControls.prototype.onTracksChange_ = function() {
	this.player_.getTextTracks().length
},
ShakaControls.prototype.onCaptionStateChange_ = function() {
	this.player_.isTextTrackVisible()
},
ShakaControls.prototype.onFullscreenClick_ = function() {
	document.fullscreenElement ? document.exitFullscreen() : this.videoContainer_.requestFullscreen()
},
ShakaControls.prototype.onCurrentTimeClick_ = function() {
	this.player_.isLive() && (this.video_.currentTime = this.seekBar_.max)
},
ShakaControls.prototype.onCastStatusChange_ = function(e) {
	this.castProxy_.canCast() && this.castAllowed_;
	var t = this.castProxy_.isCasting();
	this.notifyCastStatus_(t),
	this.castReceiverName_.style.display = t ? "inherit": "none",
	this.castReceiverName_.textContent = t ? "Casting to " + this.castProxy_.receiverName() : "",
	this.controls_.classList.toggle("casting", this.castProxy_.isCasting())
},
ShakaControls.prototype.onBufferingStateChange_ = function(e) {
	this.bufferingSpinner_.style.display = e.buffering ? "inherit": "none"
},
ShakaControls.prototype.showTrickPlay = function(e) {
	this.seekBar_.parentElement.style.width = e ? "auto": "100%",
	this.seekBar_.style.display = e ? "none": "flex"
},
ShakaControls.prototype.updateTimeAndSeekRange_ = function() {
	var e, t = this.isSeeking_ ? this.seekBar_.value: this.video_.currentTime,
	i = this.video_.duration,
	a = this.video_.buffered.length,
	n = a ? this.video_.buffered.start(0) : 0,
	o = a ? this.video_.buffered.end(0) : 0,
	r = this.player_.seekRange(),
	s = (new Date).getTime() / 1e3;
	if (0 != hpvars.eventStartTime && s - hpvars.eventStartTime < 60 * hpvars.timeLimit ? this.seekBar_.min = r.end - (s - hpvars.eventStartTime) : this.seekBar_.min = r.start, this.seekBar_.max = r.end, hpvars.seekfrom = 1e3 * parseInt(this.video_.currentTime), this.player_.isLive()) {
		this.video_.paused && (t = r.end);
		var l = Math.floor(r.end - t);
		e = (t = Math.max(0, l)) >= 3600,
		(t >= 0 || this.isSeeking_) && t < 5e8 && (this.currentTime_.textContent = "- " + this.buildTimeString_(t, e)),
		this.isSeeking_ || (this.seekBar_.value = r.end - t)
	} else hpvars.adPlaying && this.isSeeking_ && (this.isSeeking_ = !1),
	e = i >= 3600,
	this.currentTime_.textContent = this.buildTimeString_(t, e),
	this.isSeeking_ || (this.seekBar_.value = t),
	this.currentTime_.style.cursor = "";
	hpvars.playhead = 1e3 * parseInt(t);
	var d = ["to right"];
	if (0 == a) d.push("#000 0%");
	else {
		var u = n / i || 0,
		c = o / i || 0,
		p = t / i || 0;
		if (this.player_.isLive()) {
			var h = Math.max(n, r.start),
			v = Math.min(o, r.end),
			m = r.end - r.start;
			u = (h - r.start) / m || 0,
			c = (v - r.start) / m || 0,
			p = (t - r.start) / m || 0
		}
		d.push("#a5a5a5 " + 100 * u + "%"),
		d.push("#a5a5a5 " + 100 * u + "%"),
		d.push("#a5a5a5 " + 100 * p + "%"),
		d.push("#a5a5a5 " + 100 * p + "%"),
		d.push("#a5a5a5 " + 100 * c + "%"),
		d.push("#fff " + 100 * c + "%")
	}
	this.seekBar_.style.background = "linear-gradient(" + d.join(",") + ")"
},
ShakaControls.prototype.buildTimeString_ = function(e, t) {
	var i = Math.floor(e / 3600),
	a = Math.floor(e / 60 % 60),
	n = Math.floor(e % 60);
	n < 10 && (n = "0" + n);
	var o = a + ":" + n;
	return a < 10 && (o = "0" + o),
	t && (o = i + ":" + o),
	o
};
var initUrl = '';
var initSubtitle = '';
var video;
var player;
var seekBar;
var currentTime;
var apiInfo;
var defaultAudioLang = "Cantonese";
var selectedAudioLang;
var defaultSubtitleLang = "tc";
var defaultQuality = "auto";
var selectedQulity;
var subtitleList;
var audioList;
var qualityList;
var contentId;
var defaultBitrateKbps = 0;
var bitrateKbps = 0;
var subtitleLive;
var youboraError1001 = false;

function initApp() {
	printLog("useragent= "+navigator.userAgent);
	// Debug logs, when the default of INFO isn't enough:
	//shaka.log.setLevel(shaka.log.Level.DEBUG);
	// Verbose logs, which can generate a lot of output:
	// shaka.log.setLevel(shaka.log.Level.V1);
	// Verbose 2, which is extremely noisy:
	// shaka.log.setLevel(shaka.log.Level.V2);

	// Install built-in polyfills to patch browser incompatibilities.
	hpvars.displaytxt = '';
	shaka.polyfill.installAll();
	
	//document.getElementById('playPauseButton').style.display='block';
	video = document.getElementById('video');
	seekBar = document.getElementById('seekBar');
	currentTime = document.getElementById('currentTime');
	//document.getElementById('playPauseButton').textContent = '';
	document.getElementById('giantPlayButton').textContent = '';
	//var api_domain = "1glive2021.000webhostapp.com";
	//var api_domain = "uapi.1glive.cn";
	var api_domain = hpconfig.api_domain;
	var api_url;
	if(hpvars.videoType == "live"){
		api_url = "https://" + api_domain + "/rest_app_user_subscription_api/video_checkout/format/jsonp?device_type=WEB_"+getBrowser()+"&type=channel&id=" + hpvars.channel_code + "&token=" + hpvars.token;
	} else {
		api_url = "https://" + api_domain + "/rest_app_user_subscription_api/video_checkout/format/jsonp?device_type=WEB_"+getBrowser()+"&type=video&id=" + hpvars.videoId + "&token=" + hpvars.token;
	}
	printLog("api_url= "+api_url);
	var jsonPromise = $.ajax({
		url: api_url,
		dataType: "jsonp",
		jsonp: "callback",
		type: 'GET',
		success: function(data) {
			getVideoInfo(data);
		}
	});

	jsonPromise.done(function(data) {
		if(typeof data.content != 'undefined') {
			if(data.content.error_code == 33445500 || data.content.error_code == 33556600){
				slaveExpiredRedirect(data.content.error_code);
			} else {
				hidePlayer("HP02-"+data.content.error_code);
				printLog("error= "+"HP02-"+data.content.error_code);
			}
		} else {
			// Check to see if the browser supports the basic APIs Shaka needs.
			if (shaka.Player.isBrowserSupported()) {
				// Everything looks good!
				initPlayer();
				initYoubora();
				//requestAds();
			} else {
				// This browser does not have the minimum set of APIs we need.
				console.error('Browser not supported!');
			}
		}
	});
}

function getVideoInfo(data) {
	apiInfo = data;
}

function Live_broadcast_paused() {
	if (video.paused) {video.play();} else {video.pause();}
}

function initPlayer() {
	printLog("initPlayer:: ");
	//$(".promo.live-epg").css("background","transparent");
	//$(".live-channel-listing.promo-wrap").css("background","transparent");
	$(".adContainer").remove();
	$(".epg-right").remove();
	$(".epg-left").css("width","945px");
	$("#playPauseButton").css({"display":"block", "position":"relative", "width":"32px", "height":"28px", "margin":"5px 2px"});
	
	document.getElementById('playPauseButton').onclick = Live_broadcast_paused;
	document.getElementById('playPauseButton').onclick = Live_broadcast_paused;;
	if (apiInfo.profiles.hasOwnProperty("auto")){
		defaultQuality = "auto";
	} else if (apiInfo.profiles.hasOwnProperty("low")){
		defaultQuality = "low";
	} else if (apiInfo.profiles.hasOwnProperty("high")){
		defaultQuality = "high";
	} else if (apiInfo.profiles.hasOwnProperty("hd")){
		defaultQuality = "hd";
	}

	if(hpvars.videoType == 'live'){
		initUrl = apiInfo.profiles[defaultQuality];
		contentId = 'ott_'+initUrl.split('ott_')[1].split("/")[0];
		defaultAudioLang = "zh";
		defaultSubtitleLang = "zh";
		hpvars.quality_label = defaultQuality;
		hpvars.timeLimit = apiInfo.timeshift;

		//if(hpvars.timeLimit == 0){
		//	seekBar.style.display = 'none';
		//	currentTime.style.display = 'none';
		//}
	} else {
		initUrl = apiInfo.profiles[defaultQuality].Default;  // api
		contentId = initUrl.split(':')[2].split('/')[3];
		if(typeof apiInfo.subtitle != 'undefined' && Object.keys(apiInfo.subtitle).length > 0) {
			defaultSubtitleLang = Object.keys(apiInfo.subtitle)[0];
			defaultSubtitle = apiInfo.subtitle[defaultSubtitleLang];
			initSubtitle = defaultSubtitle.replace('web_subtitle', 'web_subtitle_cors');
		} else {
			apiInfo.subtitle = {'auto':'https://api.ttml.mytvsuper.tvb.com/web_subtitle_default.php'};
			initSubtitle = 'https://api.ttml.mytvsuper.tvb.com/web_subtitle_default.php';
		}
		defaultAudioLang = "Cantonese";
		hpvars.quality_label = apiInfo.profiles[defaultQuality].quality;

		// create VOD subtitle list
		subtitleList = apiInfo.subtitle;
		var subtitleMenu = document.getElementById('textLanguages');
		for (var key in subtitleList) {
			var opt = document.createElement('option');
			opt.value = key;
			opt.innerHTML = langConvert(key);
			subtitleMenu.appendChild(opt);
			if(key == defaultSubtitleLang)
				opt.setAttribute('selected', true);
		}
	}
    hpvars.video_stage = apiInfo.video_stage;
	qualityList = apiInfo.profiles;
	//delete qualityList.auto;
	//apiInfo.disclaimer_image = "http://img.tvb.com/ti_img/myTVSuperSFM/2330/5b7e8e11b13f2_1535020561.jpg";
	if(apiInfo.disclaimer_image != ""){
		hpvars.showFlip = true;
		$("#flipContainer img").attr("src",apiInfo.disclaimer_image);
        $("#flipContainer").show();
    }

	//printLog("video Url= "+initUrl);
	printLog("Audio Lang= "+defaultAudioLang);
	printLog("Subtitle Lang= "+defaultSubtitleLang);
	printLog("quality label= "+defaultQuality);
	printLog("Subtitle= "+initSubtitle);

	player = new shaka.Player(video);

	// Use Shaka Controls
	controls_ = new ShakaControls();
	castProxy_ = new shaka.cast.CastProxy(video, player, '658CCD53');
	controls_.init(castProxy_, onError, null);

	player.getNetworkingEngine().registerResponseFilter(licensePostProcessor);

	player.getNetworkingEngine().registerRequestFilter(function(type, request) {
		if (type == shaka.net.NetworkingEngine.RequestType.LICENSE) {
			printLog('LA url: ' + request.uris[0]);
			//console.log('SOAPAction: '+request.headers['SOAPAction']);

			if (request.headers['SOAPAction']) {
				request.headers['Content-Type'] = 'text/xml';
			} else {
				request.headers['Content-Type'] = 'application/octet-stream';
			}
			// for playback attributes
			request.headers['X-Service-ID'] = 'super';
			request.headers['X-Client-Platform'] = 'html5';
			request.headers['X-User-Token'] = hpvars.token;
		}
	});

	loadPlayer();
}

function loadPlayer() {
	// Create a Player instance.
	var url = initUrl;
	var laUrlWv = hpconfig.initLaUrlWv + contentId;
	var laUrlPr = hpconfig.initLaUrlPr + contentId;
	var subtitleUrl = initSubtitle;

	// Attach player to the window to make it easy to access in the JS console.
	window.player = player;

	// Listen for error events.
	player.addEventListener('error', onErrorEvent);

	// Listen for audio/text change events.
	player.addEventListener('trackschanged', onTracksChanged);
	player.addEventListener('adaptation', onAdaptation);
	document.getElementById('tracks').addEventListener('change', onTrackSelected);
	document.getElementById('audioLanguages').addEventListener('change', onAudioLanguageSelected);
	document.getElementById('textLanguages').addEventListener('change', onTextLanguageSelected);

	// Listen for time update events.
	video.addEventListener('timeupdate', updateTime);
	/*
	if(!selectedAudioLang){
		selectedAudioLang = defaultAudioLang;
	}
	*/

  	var config = /** @type {shakaExtern.PlayerConfiguration} */({
		abr: {},
		manifest: {
			dash: {}
		},
      	drm: {
        	servers: {
             	'com.widevine.alpha': laUrlWv
               	//'com.microsoft.playready': laUrlPr
            },
          	advanced: {
          		'com.widevine.alpha': {
              	'persistentStateRequired': true,
              	'videoRobustness': 'SW_SECURE_CRYPTO',
              	'audioRobustness': 'SW_SECURE_CRYPTO'
       			}
        	}
       	},
      	preferredAudioLanguage: selectedAudioLang,
       	preferredTextLanguage: 'zh'
	});

	if($.browser.name === 'msedge' && $.browser.version < 70){
		config.drm.servers['com.microsoft.playready'] = laUrlPr;
	}
  	//config.manifest.dash.clockSyncUri = hpconfig.clockSyncUri + "?t=" + Math.random();
	player.configure(config);
	// Try to load a manifest.
	// This is an asynchronous process.

	player.load(url, hpvars.startPosition).then(function() {
		// This runs if the asynchronous load is successful.
		console.log('The video has now been loaded!');
		//player.setTextTrackVisibility(true);

		var promise = document.querySelector('video').play();

		if (promise !== undefined) {
			promise.then(_ => {
			// Autoplay started!
				hpvars.autoplay = true;
				if(hpvars.videoType === 'live'){
					if(hpvars.showFlip){
						$("#giantPlayButtonContainer").css("display","none");
						video.volume = 0;
						video.pause();
						showFlip();
					} else {
						video.play();
					}
				} else {
					//if(typeof(ads) === "undefined"){
					if(hpvars.adTag === ""){
						printLog("ads undefined");
						if(hpvars.showFlip){
							video.pause();
							showFlip();
						} else {
							video.play();
						}
					} else {
						$("#giantPlayButtonContainer").css("display","none");
						video.pause();
						requestAds();
					}
				}
			}).catch(error => {
				// Autoplay was prevented.
				// Show a "Play" button so that user can start playback.
				hpvars.autoplay = false;
				$("#giantPlayButtonContainer").css("display","block");
				if(typeof(ads) === "undefined"){
					console.log("ads undefined");
					if(hpvars.showFlip){
						$("#giantPlayButtonContainer").show();
					} else {
						console.log("ads undefined and no flip");
					}
				}
			});
		}

		// Try external subtitle
        if(hpvars.videoType !== 'live'){
            player.addTextTrack(subtitleUrl, defaultSubtitleLang, 'subtitle', 'application/ttml+xml', null);
            player.setTextTrackVisibility(true);
        //} else if(Object.keys(subtitleLive).length !== 0){
        } else if(player.getTextTracks().length !== 0){
            player.setTextTrackVisibility(true);
        }

	}).catch(onError); // onError is executed if the asynchronous load fails.
}

function licensePostProcessor(type, response) {
	// A generic filter for all responses, so filter on type LICENSE:
	if (type != shaka.net.NetworkingEngine.RequestType.LICENSE) return;
}

function unloadPlayer() {
	window.player = player;
	player.unload().then(function() {
		// This runs if the asynchronous load is successful.
		console.log('The video has now been unloaded!');
	}).catch(onError); // onError is executed if the asynchronous unload fails.
	//player.destroy();
}

function onTracksChanged(event) {
	printLog("onTracksChanged::");
	updateAudioLanguages();
	updateTextLanguages();
	updateTracks();
}

function updateTracks() {
	var list = document.getElementById('tracks');
	//var langList = document.getElementById('audioLanguages');
	//var language = langList.selectedIndex >= 0 ? langList.options[langList.selectedIndex].value : '';
	var tracks = player.getVariantTracks();

        tracks.forEach(function(track) {
		if(track.active){
			bitrateKbps = Math.floor(track.bandwidth/1000);
		}
        });

	// Remove old tracks
	while (list.firstChild) {
		list.removeChild(list.firstChild);
	}

	for (var key in qualityList) {
		var opt = document.createElement('option');
		opt.value = key;
		opt.innerHTML = langConvert(key);
		list.appendChild(opt);
		if(typeof(selectedQulity) == 'undefined')
			selectedQulity = defaultQuality;
		if(key == selectedQulity){
			opt.setAttribute('selected', true);
			//hpvars.quality_label = selectedQulity;
		}
	}
}

function updateAudioLanguages() {
	var list = document.getElementById('audioLanguages');
	var languages = player.getAudioLanguages();
	var tracks = player.getVariantTracks();
	updateLanguageOptions("audio", list, languages, tracks);
}

function updateTextLanguages() {
	var list = document.getElementById('textLanguages');
	if (player.isLive()) {
		var languages = player.getTextLanguages();
		var tracks = player.getTextTracks();
		updateLanguageOptions("text", list, languages, tracks);
	}
}

function updateLanguageOptions(type, list, languages, tracks) {
	// Remove old options
	while (list.firstChild) {
		list.removeChild(list.firstChild);
	}

	var activeTracks = tracks.filter(function(track) {
		return track.active == true;
	});
	var selectedTrack = activeTracks[0];

	if(languages.length <= 0){
		var lang = "auto";
		var option = document.createElement('option');
		option.textContent = langConvert(lang);
		option.value = lang;
		option.selected = lang;
		list.appendChild(option);

	} else {
	// Populate list with new options.
		languages.forEach(function(lang) {
			var option = document.createElement('option');
			if(type == "audio" && hpvars.videoType === "live"){
				option.textContent = langConvert(lang+"_au");
			} else {
				option.textContent = langConvert(lang);
			}
			option.value = lang;
			option.selected = lang == selectedTrack.language;
			if(type == "audio"){
				selectedAudioLang = selectedTrack.language;
			}
			list.appendChild(option);
		});
	}
}

function onAdaptation(event) {
	var list = document.getElementById('tracks');

	// Find the row for the active track and select it.
	var tracks = player.getVariantTracks();
	tracks.forEach(function(track) {
		if (!track.active) return;

		for (var i = 0; i < list.options.length; ++i) {
			var option = list.options[i];
			if (option.value == track.id) {
				option.selected = true;
				break;
			}
		}
	});
}

function refreshTextTrack() {
	if(hpvars.videoType !== "live" ||  player.getTextTracks().length > 0){
		player.setTextTrackVisibility(false);
		player.setTextTrackVisibility(true);
	}
}
function onTrackSelected(event) {
	var list = event.target;
	var option = list.options[list.selectedIndex].value;
	//var track = option.track;
	var url;
	printLog("onTrackSelected:: option=" + option);
	hpvars.changeSetting = true;
	var textLangList = document.getElementById('textLanguages');
	var Textlang = textLangList.selectedIndex >= 0 ? textLangList.options[textLangList.selectedIndex].value : '';

/*
	if (list.id == 'tracks') {
		// Disable abr manager before changing tracks
		var config = {
			abr: {
				enabled: false
			}
		};
		player.configure(config);
		player.selectVariantTrack(track, true);
	}
*/

	if(hpvars.videoType == 'live'){
		url = apiInfo.profiles[option];
	} else {
		url = apiInfo.profiles[option].Default;
		hpvars.quality_label = apiInfo.profiles[option].quality;
        for (var key in subtitleList) {
        	if (key == Textlang) {
             	subtitleUrl = subtitleList[key].replace("web_subtitle", "web_subtitle_cors");
               	break;
          	}
      	}
	}

	if (url == null || url == '') {
		return;
	} else {
		player.configure({
			preferredAudioLanguage: selectedAudioLang,
			preferredTextLanguage: Textlang
		});
		selectedQulity = option;
		player.load(url, video.currentTime).then(function() {
			//setQualityLabel(hpvars.quality_label);
			if(hpvars.videoType != 'live')
				player.addTextTrack(subtitleUrl, Textlang, 'subtitle', 'application/ttml+xml', null);
			else
				refreshTextTrack();
			video.play();
		}).catch(onError);
	}
}

function onAudioLanguageSelected(event) {
	var list = event.target;
	var language = list.options[list.selectedIndex].value;
   	printLog("onAudioLanguageSelected:: option=" + language);
	hpvars.changeSetting = true;
	player.selectAudioLanguage(language);
	selectedAudioLang = language;
}

function onTextLanguageSelected(event) {
	var list = event.target;
	var language = list.options[list.selectedIndex].value;
        printLog("onTextLanguageSelected:: option=" + language);
	hpvars.changeSetting = true;
	if (player.isLive()) {
		player.selectTextLanguage(language);
	} else {
		//var url = document.getElementById('inputUrl').value;
		var url = initUrl;
		for (var key in subtitleList) {
			if (key == language) {
				subtitleUrl = subtitleList[key].replace("web_subtitle", "web_subtitle_cors");
				break;
			}
		}
		if (subtitleUrl == null || subtitleUrl == '') {
			return;
		} else {
			player.configure({ preferredAudioLanguage: selectedAudioLang });
			player.load(url, video.currentTime).then(function() {
				player.addTextTrack(subtitleUrl, language, 'subtitle', 'application/ttml+xml', null);
				video.play();
				//refreshTextTrack();
			}).catch(onError);
		}
	}
}

function updateTime(event) {
	if (player.isLive()) {
		//console.log("timeUpdate:::: video.currentTime= "+video.currentTime);
		//var tmpCurrentTime = parseInt(video.currentTime);
		//video.currentTime = tmpCurrentTime;
		//document.getElementById('displayTime').innerHTML = toDateTime(video.currentTime);
	} else {
		if(!isNaN(video.duration))
      			document.getElementById('displayTime').innerHTML = toDateTime(video.duration, (video.duration >= 3600));
	}
	//playHeadTime = $('#currentTime').text();
	//console.log("updateTime::: playHeadTime= "+playHeadTime);
	//console.log('The current time is ' + video.currentTime + ' Date: ' + toDateTime(video.currentTime));
}

/*
function toDateTime(secs) {
	//var t = new Date(2000, 0, 1); // Epoch
	var t = new Date(Date.UTC(2000, 0, 1, 0));
	t.setSeconds(secs);
	t = t.toTimeString().split(' ')[0];
	return t;
}
*/

function toDateTime(displayTime, showHour) {
  var h = Math.floor(displayTime / 3600);
  var m = Math.floor((displayTime / 60) % 60);
  var s = Math.floor(displayTime % 60);
  if (s < 10) s = '0' + s;
  var text = m + ':' + s;
  if (m < 10) text = '0' + text;
  if (showHour) {
    text = h + ':' + text;
  }
  return text;
}

function reloadPlayer() {
	unloadPlayer();
	loadPlayer();
}

function onErrorEvent(event) {
	// Extract the shaka.util.Error object from the event.
	onError(event.detail);
}

function onError(error) {
	// Log the error.
	//console.error('Error code', error.code, 'object', error);
	//printLog("onError:: error code= "+error.code);
	if(!youboraError1001){
		window.youbora.errorHandler("HP01-"+error.code,"HP01-"+error.code+", data="+error.data.toString());
		if(error.code == 1001){
			youboraError1001 = true;
		}
	}
    if(error.code == "6007"){
    	slaveExpiredRedirect("HP01-"+error.code);
   	} else if(error.category == 1 || error.category == 6){
     	hidePlayer("HP01-"+error.code);
		video.play();
	}
	//window.youbora.errorHandler("HP01-"+error.code);
}

// ads
// Copyright 2013 Google Inc. All Rights Reserved.
// You may study, modify, and use this example for any purpose.
// Note that this example is provided "as is", WITHOUT WARRANTY
// of any kind either expressed or implied.
var adsManager;
var adsLoader;
var adDisplayContainer;
var intervalTimer;
var video;
var ad;
var ads_volume_level=1;
var haveSurveyCompleted = false;

function adInit() {}

function setAdsVolume(tmp_volume){}

function createAdDisplayContainer() {}
function requestAds() {}
function contentEndedListener() {}
function onAdsManagerLoaded(adsManagerLoadedEvent) {}
function onAdEvent(adEvent) {}
function onAdError(adErrorEvent) {}
function onContentPauseRequested() {}
function onContentResumeRequested() {}

function jumpToLive() {
	player.isLive() && (video.currentTime = seekBar.max)
}
function pad(e, t, i) {
	return i = i || "0",
	(e += "").length >= t ? e: new Array(t - e.length + 1).join(i) + e
}
function langConvert(e) {
	var t = e;
	if ("tc" == hpvars.lang) switch (e.trim().toLowerCase()) {
	case "cantonese":
	case "zh_au":
		t = "粵語";
		break;
	case "mandarin":
	case "qph_au":
		t = "國語";
		break;
	case "english":
	case "eng_au":
		t = "英語";
		break;
	case "french":
		t = "法語";
		break;
	case "japanese":
		t = "日語";
		break;
	case "korean":
		t = "韓語";
		break;
	case "others":
		t = "其他";
		break;
	case "polish":
		t = "波蘭語";
		break;
	case "portuguese":
		t = "葡萄牙語";
		break;
	case "thai":
		t = "泰語";
		break;
	case "vietnamese":
		t = "越南語";
		break;
	case "channel":
		t = "聲道";
		break;
	case "caption":
		t = "字幕";
		break;
	case "quality":
		t = "影片質素";
		break;
	case "auto":
		t = "自動";
		break;
	case "low":
		t = "低";
		break;
	case "high":
		t = "中";
		break;
	case "hd":
		t = "高";
		break;
	case "chi":
	case "tc":
	case "zh":
		t = "繁中";
		break;
	case "chs":
	case "sc":
		t = "简中";
		break;
	case "eng":
	case "en":
		t = "English";
		break;
	case "au1":
	case "au1_au":
		t = "聲道1";
		break;
	case "au2":
	case "au2_au":
		t = "聲道2";
		break;
	case "au3":
	case "au3_au":
		t = "聲道3";
		break;
	case "ads":
		t = "廣告";
		break;
	case "upnext":
		t = "即將播放";
		break;
	default:
		t = "自動"
	} else if ("en" == hpvars.lang) switch (e.trim().toLowerCase()) {
	case "cantonese":
	case "zh_au":
		t = "Cantonese";
		break;
	case "mandarin":
	case "qph_au":
		t = "Mandarin";
		break;
	case "english":
	case "eng_au":
		t = "English";
		break;
	case "french":
		t = "French";
		break;
	case "japanese":
		t = "Japanese";
		break;
	case "korean":
		t = "Korean";
		break;
	case "others":
		t = "Others";
		break;
	case "polish":
		t = "Polish";
		break;
	case "portuguese":
		t = "Portuguese";
		break;
	case "thai":
		t = "Thai";
		break;
	case "vietnamese":
		t = "Vietnamese";
		break;
	case "channel":
		t = "Channel";
		break;
	case "caption":
		t = "Subtitle";
		break;
	case "quality":
		t = "Quality";
		break;
	case "auto":
		t = "auto";
		break;
	case "low":
		t = "low";
		break;
	case "high":
		t = "middle";
		break;
	case "hd":
		t = "high";
		break;
	case "chi":
	case "tc":
	case "zh":
		t = "繁中";
		break;
	case "chs":
	case "sc":
		t = "简中";
		break;
	case "eng":
	case "en":
		t = "English";
		break;
	case "au1":
	case "au1_au":
		t = "audio 1";
		break;
	case "au2":
	case "au2_au":
		t = "audio 2";
		break;
	case "au3":
	case "au3_au":
		t = "audio 3";
		break;
	case "ads":
		t = "Ads";
		break;
	case "upnext":
		t = "Up Next";
		break;
	default:
		t = "auto"
	}
	return t
}
function getBrowser() {
	var e = "undefined" != typeof InstallTrigger,
	t = !!document.documentMode,
	i = !t && !!window.StyleMedia;
	return $.browser.chrome || e ? "CHROME": i || t ? "EDGE": void 0
}
function initYoubora() {
	printLog("initYoubora::"),
	"live" == hpvars.videoId ? (yTitle = hpvars.programme, yIsLive = !0) : (yTitle = hpvars.programme + "-" + hpvars.episodeNo, yIsLive = !1),
	"undefined" != typeof $YB && (window.youbora = new $YB.plugins.Shaka2(player, video, {
		accountCode: hpconfig.youbora,
		enableAnalytics: !0,
		httpSecure: !0,
		service: "youbora.tvb.com",
		username: hpvars.memberId,
		media: {
			title: yTitle,
			duration: hpvars.duration,
			isLive: yIsLive,
			resource: initUrl,
			cdn: ""
		},
		properties: {
			filename: yTitle,
			content_id: hpvars.videoId
		},
		extraParams: {
			param1: "mytv_super_html5",
			param3: hpvars.customer_stage,
			param4: apiInfo.video_stage,
			param5: "pc_network",
			param6: hpvars.resolution,
			param7: defaultQuality
		}
	}))
}